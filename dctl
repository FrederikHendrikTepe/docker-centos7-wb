#!/usr/bin/env bash
#
# DockerControl helper script, feel free to extend|improve me ;)
#
# @copyright (c) 2016 Patrick Paechnatz <patrick.paechnatz@gmail.com>
# @author patrick.paechnatz@gmail.com
# @updated 2016/29/07
# @version 1.0.1
#

# activate strict mode for bash
set -e

# some default definitions
VERSION="1.0.1"

# some default configuration constants
SCRIPT_PATH=$(dirname "$0")

_show_title() {
    echo -e "\n\033[1;92mDockerControl/CLI Helper v$VERSION \033[0m"
    echo -e "copyright (c) 2015-2016 Patrick Paechnatz <patrick.paechnatz@gmail.com>"
}

_show_short_help() {
    echo -e "$./dctl bai | --build-all-images             -> build all images inside this workbench"
    echo -e "$./dctl val | --validate-workbench           -> validate all images availability for this workbench"
    echo -e "$./dctl rec | --remove-exited-container      -> remove all exited containers including 'ofs-volumes'"
    echo -e "$./dctl rac | --remove-all-container         -> remove all (!) containers including 'ofs-volumes'"
    echo -e "$./dctl rdi | --remove-dangling-images       -> remove all dangling <none>|<incomplete> images"
}

_image_build() {

    img_name=""
    img_path=""

    while [[ ${1} ]]; do

        case "${1}" in
            img|--image-name)
                img_name="${2}"
                shift
                ;;

            path|--image-path)
                img_path="${2}"
                shift
                ;;

        esac
        if ! shift; then
            echo "missing parameter arguments!" >&2
            return 1
        fi
    done

   cd ${img_path} && docker build -t ${img_name} . && cd ..
    _image_build_check img ${img_name}
}

_image_build_check() {

    img_name=""
    img_cnt=""

    case "${1}" in
        img|--image-name)

            img_name="${2}"
            img_cnt=$(docker images | grep "^$img_name" | wc -l)
            if [ $img_cnt -eq 0 ]; then
                echo -e "\n\033[0;31m[FAILURE] previously generated image ${img_name} not found!\033[0m <EXIT>\n"
                _docker_image_clear
                exit 9
            else
                echo -e "\033[1;92m[SUCCESS] image available -> ${img_name}\033[0m";
            fi

            shift
        ;;

    esac
}

_get_parameters() {

    if [ $# -eq 0 ]; then
        echo -e "\nno arguments supplied - please us the following syntax:\n"
        _show_short_help
        exit 1
    fi

    case "${1}" in
        bai|--build-all-images)
            echo; read -p "build all images in this workbench | are you sure (y/n/J/j) ?" -n 1 -r; echo
            if [[ ! $REPLY =~ ^[YyJj]$ ]]
            then
                exit 9
            fi

            _image_build --image-name "local/df/wb/centos/7" --image-path "./df-wb-centos-7"
            _image_build --image-name "local/df/wb/centos/7/rdbs/mysql56" --image-path "./df-wb-rdbs-mysql56"
            _image_build --image-name "local/df/wb/centos/7/rdbs/mysql57" --image-path "./df-wb-rdbs-mysql57"
            _image_build --image-name "local/df/wb/centos/7/rdbs/postresql93" --image-path "./df-wb-rdbs-postgresql93"
            _image_build --image-name "local/df/wb/centos/7/rdbs/postresql95" --image-path "./df-wb-rdbs-postgresql95"
            _image_build --image-name "local/df/wb/centos/7/httpd/apache" --image-path "./df-wb-httpd-apache"
            _image_build --image-name "local/df/wb/centos/7/httpd/apache/php56" --image-path "./df-wb-httpd-apache-php56"
            _image_build --image-name "local/df/wb/centos/7/httpd/apache/php70" --image-path "./df-wb-httpd-apache-php70"
            _image_build --image-name "local/df/wb/centos/7/httpd/apache/php70/app" --image-path "./df-wb-app"

            shift
            ;;

        rec|--remove-exited-container)
            echo; read -p "remove all exited containers | are you sure (y/n/J/j) ?" -n 1 -r; echo
            if [[ ! $REPLY =~ ^[YyJj]$ ]]
            then
                exit 9
            fi
            docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm -fv

            shift
            ;;

        rac|--remove-all-container)
            echo; read -p "remove all (!) containers | are you sure (y/n/J/j) ?" -n 1 -r; echo
            if [[ ! $REPLY =~ ^[YyJj]$ ]]
            then
                exit 9
            fi
            docker rm -fv $(docker ps -a -q)

            shift
            ;;

        rdi|--remove-dangling-images)
            echo; read -p "remove all dangling images | are you sure (y/n/J/j) ?" -n 1 -r; echo
            if [[ ! $REPLY =~ ^[YyJj]$ ]]
            then
                exit 9
            fi

            docker images -q --filter "dangling=true" | xargs docker rmi -f
            shift
            ;;

        val|--validate-workbench)
            echo -e "validate all images of this workbench ...\n"

            _image_build_check --image-name "local/df/wb/centos/7" --image-path "./df-wb-centos-7"
            _image_build_check --image-name "local/df/wb/centos/7/rdbs/mysql56" --image-path "./df-wb-rdbs-mysql56"
            _image_build_check --image-name "local/df/wb/centos/7/rdbs/mysql57" --image-path "./df-wb-rdbs-mysql57"
            _image_build_check --image-name "local/df/wb/centos/7/rdbs/postresql93" --image-path "./df-wb-rdbs-postgresql93"
            _image_build_check --image-name "local/df/wb/centos/7/rdbs/postresql95" --image-path "./df-wb-rdbs-postgresql95"
            _image_build_check --image-name "local/df/wb/centos/7/httpd/apache" --image-path "./df-wb-httpd-apache"
            _image_build_check --image-name "local/df/wb/centos/7/httpd/apache/php56" --image-path "./df-wb-httpd-apache-php56"
            _image_build_check --image-name "local/df/wb/centos/7/httpd/apache/php70" --image-path "./df-wb-httpd-apache-php70"
            _image_build_check --image-name "local/df/wb/centos/7/httpd/apache/php70/app" --image-path "./df-wb-app"

            shift
            ;;

    esac

}

_show_title
_get_parameters $@